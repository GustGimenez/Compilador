package lexico;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;



parser code {:

:};

/**	Terminais **/
terminal if, then, else, do, while, for, var, begin, end;
terminal and, not, true, false, program, int, boolean;
terminal read, write, procedure;

terminal BRANCO, PONTO, VIRGULA, PONTO_VIRGULA;	
terminal DIGITO, LETRA;
terminal NUM_INT, NUM_REAL, OPSOMA, OPSOMA;
terminal OPSUB, OPMUL, OPDIV, AP, FP, OP_MENOR, OP_MAIOR;
terminal OP_MAIOR, OP_MENOR_IGUAL, OP_MAIOR_IGHAL, OP_ATRI;
terminal OP_IGUAL, OP_DIF, IDENTIFICADOR;


/** Não terminais **/
nonterminal Pograma, Corpo, Bloco, Declaracoes_Variaveis;
nonterminal Parte_Declaracoes_Variaveis, Comando_Composto;
nonterminal Declaracoes_Subrotinas, Declaracao_Variaveis;
nonterminal Declaracao_Variavel, Tipo, Identificadores;
nonterminal Procedimento, Parametros, Comando, Atribuicao;
nonterminal Chamanda_Procedimento, Comando_Condicional1;
nonterminal Comando_Repetitivo1, Variavel, Expressao;
nonterminal Chamada_Procedimento, Lista_Expressoes;
nonterminal Expressao_Simples, Relacao, Termo, Fator;
nonterminal Termo_Aux, Numero, 



/** Esboço da sintaxe da linguagem **/
/**	Aquilo que está entre {} é fechamento (
	ver como faz isso usando CUP) **/
/** Aquilo que esta entre [] é opcional **/


start with Programa;


/** --- Programa e Bloco --- **/

Programa ::= program IDENTIFICADOR PONTO_VIRGULA Corpo;

Bloco ::= Parte_Declaracoes_Variaveis
       	  Declaracoes_Subrotinas
		  Comando_Composto;


/** --- Declarações --- **/

Parte_Declaracao_Variaveis ::= 
			Declaracoes_Variaveis PONTO_VIRGULA |
			Declaracoes_Variaveis PONTO_VIRGULA Parte_Declaracao_Variaveis;

Declaracoes_Variaveis ::= Declaracao_Variaveis Declaracao_Variavel
						  | Declaracao_Variavel;

Declaracao_Variavel ::= Tipo Identificadores;

Declaracoes_Subrotinas ::= Declaracoes_Subrotinas Procedimento 	
						   | Procedimento;

Identificadores ::= 
			Identificadores IDENTIFICADOR | 
			IDENTIFICADOR;

Pprocedimento ::= 
	procedure IDENTIFICADOR Parametros PONTO_VIRGULA Bloco |
	procedure IDENTIFICADOR PONTO_VIRGULA Bloco;

Parametros ::= var Identificadores DOIS_PONTOS Tipo |
			   Identificadores DOIS_PONTOS Tipo |
			   var Identificadores DOIS_PONTOS Tipo Parametros |
			   Identificadores DOIS_PONTOS Tipo Parametros;


/** --- Comandos --- **/

Comando_Composto ::= begin Comando | 
						  begin Comando PONTO_VIRGULA Comando end;

Comando ::=
			Atribuicao|Chamanda_Procedimento|Comando_Composto |
			Comando_Condicional1|Comando_Repetitivo1;

 Atribuicao ::= Variavel OP_ATR Expressao;

Chamada_Procedimento ::= IDENTIFICADOR Lista_Expressoes |
							  IDENTIFICADOR;

Comando_Condicional1 ::= 
		if Expressao then Comando else Comando |
		if Expressao then Comando;

Comando_Repititivo1 ::= while Expressao do Comando;


/** --- Expressões --- **/

Expressao ::=
 			Expressao_Simples Relacao Expressao_Simples |
 			Expressao_Simples;

Relacao ::= OP_IGUAL|OP_DIF|OP_MENOR|OP_MAIOR
				   |OP_MENOR_IGUAL|OP_MAIOR_IGUAL;

Expressao_Simples ::= (OP_SOMA|OP_SUB Termo) |
					  Termo |
					  (OP_SOMA|OP_SUB Termo Expressao_Simples) |
					  Termo Expressao_Simples;

Termo ::= Fator | Fator (OP_MUL|OP_DIV|AND) Fator Termo_Aux;

Termo_Aux ::= (OP_MUL|OP_DIV|AND) Fator Termo_Aux | 
			  (OP_MUL|OP_DIV|AND) Fator;

Fator ::= Variavel|Numero|AP Expressao FP|NOT Fator;

Variavel ::= IDENTIFICADOR|IDENTIFICADOR Expressao;

Lista_Expressoes ::= Expressao VIRGULA Lista_Expressoes |
					 Expressao;


/** --- Números --- **/

Numero ::= DIGITO | DIGITO Numero;