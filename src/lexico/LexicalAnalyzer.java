/* The following code was generated by JFlex 1.6.1 */

package lexico;

import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/language.lex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\45\1\0\1\2\1\0\1\0\1\1\16\45\4\0\1\0\1\17"+
    "\2\0\1\44\3\0\1\12\1\13\1\10\1\6\1\0\1\7\1\3"+
    "\1\11\1\4\11\4\1\0\1\0\1\14\1\16\1\15\2\0\32\44"+
    "\4\0\1\44\1\0\1\35\1\36\1\43\1\30\1\24\1\21\1\37"+
    "\1\23\1\20\2\44\1\26\1\42\1\25\1\31\1\41\1\44\1\33"+
    "\1\27\1\22\1\40\1\34\1\32\3\44\4\0\6\45\1\45\32\45"+
    "\2\0\4\44\4\0\1\44\2\0\1\45\7\0\1\44\4\0\1\44"+
    "\5\0\27\44\1\0\37\44\1\0\u01ca\44\4\0\14\44\16\0\5\44"+
    "\7\0\1\44\1\0\1\44\21\0\160\45\5\44\1\0\2\44\2\0"+
    "\4\44\10\0\1\44\1\0\3\44\1\0\1\44\1\0\24\44\1\0"+
    "\123\44\1\0\213\44\1\0\5\45\2\0\236\44\11\0\46\44\2\0"+
    "\1\44\7\0\47\44\7\0\1\44\1\0\55\45\1\0\1\45\1\0"+
    "\2\45\1\0\2\45\1\0\1\45\10\0\33\44\5\0\3\44\15\0"+
    "\5\45\6\0\1\44\4\0\13\45\5\0\53\44\25\45\12\4\4\0"+
    "\2\44\1\45\143\44\1\0\1\44\10\45\1\0\6\45\2\44\2\45"+
    "\1\0\4\45\2\44\12\4\3\44\2\0\1\44\17\0\1\45\1\44"+
    "\1\45\36\44\33\45\2\0\131\44\13\45\1\44\16\0\12\4\41\44"+
    "\11\45\2\44\4\0\1\44\5\0\26\44\4\45\1\44\11\45\1\44"+
    "\3\45\1\44\5\45\22\0\31\44\3\45\104\0\1\44\1\0\13\44"+
    "\67\0\33\45\1\0\4\45\66\44\3\45\1\44\22\45\1\44\7\45"+
    "\12\44\2\45\2\0\12\4\1\0\7\44\1\0\7\44\1\0\3\45"+
    "\1\0\10\44\2\0\2\44\2\0\26\44\1\0\7\44\1\0\1\44"+
    "\3\0\4\44\2\0\1\45\1\44\7\45\2\0\2\45\2\0\3\45"+
    "\1\44\10\0\1\45\4\0\2\44\1\0\3\44\2\45\2\0\12\4"+
    "\4\44\7\0\1\44\5\0\3\45\1\0\6\44\4\0\2\44\2\0"+
    "\26\44\1\0\7\44\1\0\2\44\1\0\2\44\1\0\2\44\2\0"+
    "\1\45\1\0\5\45\4\0\2\45\2\0\3\45\3\0\1\45\7\0"+
    "\4\44\1\0\1\44\7\0\12\4\2\45\3\44\1\45\13\0\3\45"+
    "\1\0\11\44\1\0\3\44\1\0\26\44\1\0\7\44\1\0\2\44"+
    "\1\0\5\44\2\0\1\45\1\44\10\45\1\0\3\45\1\0\3\45"+
    "\2\0\1\44\17\0\2\44\2\45\2\0\12\4\1\0\1\44\17\0"+
    "\3\45\1\0\10\44\2\0\2\44\2\0\26\44\1\0\7\44\1\0"+
    "\2\44\1\0\5\44\2\0\1\45\1\44\7\45\2\0\2\45\2\0"+
    "\3\45\10\0\2\45\4\0\2\44\1\0\3\44\2\45\2\0\12\4"+
    "\1\0\1\44\20\0\1\45\1\44\1\0\6\44\3\0\3\44\1\0"+
    "\4\44\3\0\2\44\1\0\1\44\1\0\2\44\3\0\2\44\3\0"+
    "\3\44\3\0\14\44\4\0\5\45\3\0\3\45\1\0\4\45\2\0"+
    "\1\44\6\0\1\45\16\0\12\4\11\0\1\44\7\0\3\45\1\0"+
    "\10\44\1\0\3\44\1\0\27\44\1\0\12\44\1\0\5\44\3\0"+
    "\1\44\7\45\1\0\3\45\1\0\4\45\7\0\2\45\1\0\2\44"+
    "\6\0\2\44\2\45\2\0\12\4\22\0\2\45\1\0\10\44\1\0"+
    "\3\44\1\0\27\44\1\0\12\44\1\0\5\44\2\0\1\45\1\44"+
    "\7\45\1\0\3\45\1\0\4\45\7\0\2\45\7\0\1\44\1\0"+
    "\2\44\2\45\2\0\12\4\1\0\2\44\17\0\2\45\1\0\10\44"+
    "\1\0\3\44\1\0\51\44\2\0\1\44\7\45\1\0\3\45\1\0"+
    "\4\45\1\44\10\0\1\45\10\0\2\44\2\45\2\0\12\4\12\0"+
    "\6\44\2\0\2\45\1\0\22\44\3\0\30\44\1\0\11\44\1\0"+
    "\1\44\2\0\7\44\3\0\1\45\4\0\6\45\1\0\1\45\1\0"+
    "\10\45\6\0\12\5\2\0\2\45\15\0\60\44\1\45\2\44\7\45"+
    "\4\0\10\44\10\45\1\0\12\4\47\0\2\44\1\0\1\44\2\0"+
    "\2\44\1\0\1\44\2\0\1\44\6\0\4\44\1\0\7\44\1\0"+
    "\3\44\1\0\1\44\1\0\1\44\2\0\2\44\1\0\4\44\1\45"+
    "\2\44\6\45\1\0\2\45\1\44\2\0\5\44\1\0\1\44\1\0"+
    "\6\45\2\0\12\4\2\0\4\44\40\0\1\44\27\0\2\45\6\0"+
    "\12\4\13\0\1\45\1\0\1\45\1\0\1\45\4\0\2\45\10\44"+
    "\1\0\44\44\4\0\24\45\1\0\2\45\5\44\13\45\1\0\44\45"+
    "\11\0\1\45\71\0\53\44\24\45\1\44\12\4\6\0\6\44\4\45"+
    "\4\44\3\45\1\44\3\45\2\44\7\45\3\44\4\45\15\44\14\45"+
    "\1\44\1\45\12\4\4\45\2\0\46\44\1\0\1\44\5\0\1\44"+
    "\2\0\53\44\1\0\u014d\44\1\0\4\44\2\0\7\44\1\0\1\44"+
    "\1\0\4\44\2\0\51\44\1\0\4\44\2\0\41\44\1\0\4\44"+
    "\2\0\7\44\1\0\1\44\1\0\4\44\2\0\17\44\1\0\71\44"+
    "\1\0\4\44\2\0\103\44\2\0\3\45\40\0\20\44\20\0\125\44"+
    "\14\0\u026c\44\2\0\21\44\1\0\32\44\5\0\113\44\3\0\3\44"+
    "\17\0\15\44\1\0\4\44\3\45\13\0\22\44\3\45\13\0\22\44"+
    "\2\45\14\0\15\44\1\0\3\44\1\0\2\45\14\0\64\44\40\45"+
    "\3\0\1\44\3\0\2\44\1\45\2\0\12\4\41\0\3\45\2\0"+
    "\12\4\6\0\130\44\10\0\51\44\1\45\1\44\5\0\106\44\12\0"+
    "\35\44\3\0\14\45\4\0\14\45\12\0\12\4\36\44\2\0\5\44"+
    "\13\0\54\44\4\0\21\45\7\44\2\45\6\0\12\4\46\0\27\44"+
    "\5\45\4\0\65\44\12\45\1\0\35\45\2\0\1\45\12\4\6\0"+
    "\12\4\15\0\1\44\130\0\5\45\57\44\21\45\7\44\4\0\12\4"+
    "\21\0\11\45\14\0\3\45\36\44\15\45\2\44\12\4\54\44\16\45"+
    "\14\0\44\44\24\45\10\0\12\4\3\0\3\44\12\4\44\44\122\0"+
    "\3\45\1\0\25\45\4\44\1\45\4\44\3\45\2\44\11\0\300\44"+
    "\47\45\25\0\4\45\u0116\44\2\0\6\44\2\0\46\44\2\0\6\44"+
    "\2\0\10\44\1\0\1\44\1\0\1\44\1\0\1\44\1\0\37\44"+
    "\2\0\65\44\1\0\7\44\1\0\1\44\3\0\3\44\1\0\7\44"+
    "\3\0\4\44\2\0\6\44\4\0\15\44\5\0\3\44\1\0\7\44"+
    "\16\0\5\45\30\0\1\0\1\0\5\45\20\0\2\44\23\0\1\44"+
    "\13\0\5\45\5\0\6\45\1\0\1\44\15\0\1\44\20\0\15\44"+
    "\3\0\33\44\25\0\15\45\4\0\1\45\3\0\14\45\21\0\1\44"+
    "\4\0\1\44\2\0\12\44\1\0\1\44\3\0\5\44\6\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\4\44\1\0\13\44\2\0\4\44"+
    "\5\0\5\44\4\0\1\44\21\0\51\44\u0a77\0\57\44\1\0\57\44"+
    "\1\0\205\44\6\0\4\44\3\45\2\44\14\0\46\44\1\0\1\44"+
    "\5\0\1\44\2\0\70\44\7\0\1\44\17\0\1\45\27\44\11\0"+
    "\7\44\1\0\7\44\1\0\7\44\1\0\7\44\1\0\7\44\1\0"+
    "\7\44\1\0\7\44\1\0\7\44\1\0\40\45\57\0\1\44\u01d5\0"+
    "\3\44\31\0\11\44\6\45\1\0\5\44\2\0\5\44\4\0\126\44"+
    "\2\0\2\45\2\0\3\44\1\0\132\44\1\0\4\44\5\0\51\44"+
    "\3\0\136\44\21\0\33\44\65\0\20\44\u0200\0\u19b6\44\112\0\u51cd\44"+
    "\63\0\u048d\44\103\0\56\44\2\0\u010d\44\3\0\20\44\12\4\2\44"+
    "\24\0\57\44\1\45\4\0\12\45\1\0\31\44\7\0\1\45\120\44"+
    "\2\45\45\0\11\44\2\0\147\44\2\0\4\44\1\0\4\44\14\0"+
    "\13\44\115\0\12\44\1\45\3\44\1\45\4\44\1\45\27\44\5\45"+
    "\20\0\1\44\7\0\64\44\14\0\2\45\62\44\21\45\13\0\12\4"+
    "\6\0\22\45\6\44\3\0\1\44\4\0\12\4\34\44\10\45\2\0"+
    "\27\44\15\45\14\0\35\44\3\0\4\45\57\44\16\45\16\0\1\44"+
    "\12\4\26\0\12\5\6\0\51\44\16\45\11\0\3\44\1\45\10\44"+
    "\2\45\2\0\12\4\6\0\27\44\3\0\1\44\1\45\4\0\60\44"+
    "\1\45\1\44\3\45\2\44\2\45\5\44\2\45\1\44\1\45\1\44"+
    "\30\0\3\44\2\0\13\44\5\45\2\0\3\44\2\45\12\0\6\44"+
    "\2\0\6\44\2\0\6\44\11\0\7\44\1\0\7\44\221\0\43\44"+
    "\10\45\1\0\2\45\2\0\12\4\6\0\u2ba4\44\14\0\27\44\4\0"+
    "\61\44\u2104\0\u016e\44\2\0\152\44\46\0\7\44\14\0\5\44\5\0"+
    "\1\44\1\45\12\44\1\0\15\44\1\0\5\44\1\0\1\44\1\0"+
    "\2\44\1\0\2\44\1\0\154\44\41\0\u016b\44\22\0\100\44\2\0"+
    "\66\44\50\0\15\44\3\0\20\45\20\0\7\45\14\0\2\44\30\0"+
    "\3\44\31\0\1\44\6\0\5\44\1\0\207\44\2\0\1\45\4\0"+
    "\1\44\13\0\12\4\7\0\32\44\4\0\1\44\1\0\32\44\13\0"+
    "\131\44\3\0\6\44\2\0\6\44\2\0\6\44\2\0\3\44\3\0"+
    "\2\44\3\0\2\44\22\0\3\45\4\0\14\44\1\0\32\44\1\0"+
    "\23\44\1\0\2\44\1\0\17\44\2\0\16\44\42\0\173\44\105\0"+
    "\65\44\210\0\1\45\202\0\35\44\3\0\61\44\57\0\37\44\21\0"+
    "\33\44\65\0\36\44\2\0\44\44\4\0\10\44\1\0\5\44\52\0"+
    "\236\44\2\0\12\4\u0356\0\6\44\2\0\1\44\1\0\54\44\1\0"+
    "\2\44\3\0\1\44\2\0\27\44\252\0\26\44\12\0\32\44\106\0"+
    "\70\44\6\0\2\44\100\0\1\44\3\45\1\0\2\45\5\0\4\45"+
    "\4\44\1\0\3\44\1\0\33\44\4\0\3\45\4\0\1\45\40\0"+
    "\35\44\203\0\66\44\12\0\26\44\12\0\23\44\215\0\111\44\u03b7\0"+
    "\3\45\65\44\17\45\37\0\12\4\20\0\3\45\55\44\13\45\2\0"+
    "\1\45\22\0\31\44\7\0\12\4\6\0\3\45\44\44\16\45\1\0"+
    "\12\4\100\0\3\45\60\44\16\45\4\44\13\0\12\4\u0116\0\12\5"+
    "\u01d6\0\12\5\u0176\0\12\5\46\0\53\44\15\45\10\0\12\4\u0216\0"+
    "\12\5\u0716\0\u036f\44\221\0\143\44\u0b9d\0\u042f\44\u33d1\0\u0239\44\47\0"+
    "\12\5\346\0\12\5\u03a6\0\105\44\13\0\1\44\56\45\20\0\4\45"+
    "\15\44\u4060\0\2\44\u2163\0\5\45\3\0\26\45\2\0\7\45\36\0"+
    "\4\45\224\0\3\45\u01bb\0\125\44\1\0\107\44\1\0\2\44\2\0"+
    "\1\44\2\0\2\44\2\0\4\44\1\0\14\44\1\0\1\44\1\0"+
    "\7\44\1\0\101\44\1\0\4\44\2\0\10\44\1\0\7\44\1\0"+
    "\34\44\1\0\4\44\1\0\5\44\1\0\1\44\3\0\7\44\1\0"+
    "\u0154\44\2\0\31\44\1\0\31\44\1\0\37\44\1\0\31\44\1\0"+
    "\37\44\1\0\31\44\1\0\37\44\1\0\31\44\1\0\37\44\1\0"+
    "\31\44\1\0\10\44\2\0\62\4\u1600\0\4\44\1\0\33\44\1\0"+
    "\2\44\1\0\1\44\2\0\1\44\1\0\12\44\1\0\4\44\1\0"+
    "\1\44\1\0\1\44\6\0\1\44\4\0\1\44\1\0\1\44\1\0"+
    "\1\44\1\0\3\44\1\0\2\44\1\0\1\44\2\0\1\44\1\0"+
    "\1\44\1\0\1\44\1\0\1\44\1\0\1\44\1\0\2\44\1\0"+
    "\1\44\2\0\4\44\1\0\7\44\1\0\4\44\1\0\4\44\1\0"+
    "\1\44\1\0\12\44\1\0\21\44\5\0\3\44\1\0\5\44\1\0"+
    "\21\44\u1144\0\ua6d7\44\51\0\u1035\44\13\0\336\44\u3fe2\0\u021e\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\45\36\0\140\45\200\0\360\45\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\1\15\14\1\0\1\15"+
    "\1\16\1\17\1\20\1\21\16\14\1\22\20\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\46\0\46\0\46\0\46"+
    "\0\46\0\46\0\230\0\276\0\344\0\u010a\0\u0130\0\u0156"+
    "\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286"+
    "\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\46\0\46\0\46\0\46"+
    "\0\u01a2\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428"+
    "\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u031e"+
    "\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662"+
    "\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\2\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\2\22\1\25\1\22\1\26"+
    "\1\27\1\30\1\31\1\32\2\22\1\33\3\22\1\2"+
    "\50\0\1\2\46\0\1\34\2\4\56\0\1\35\45\0"+
    "\1\36\45\0\1\37\45\0\1\40\33\0\1\22\13\0"+
    "\1\22\1\41\3\22\1\42\20\22\4\0\1\22\13\0"+
    "\11\22\1\43\3\22\1\44\10\22\4\0\1\22\13\0"+
    "\3\22\1\45\7\22\1\46\12\22\4\0\1\22\13\0"+
    "\26\22\4\0\1\22\13\0\5\22\1\47\1\50\17\22"+
    "\4\0\1\22\13\0\11\22\1\42\14\22\4\0\1\22"+
    "\13\0\1\51\10\22\1\41\14\22\4\0\1\22\13\0"+
    "\3\22\1\52\7\22\1\53\12\22\4\0\1\22\13\0"+
    "\4\22\1\54\21\22\4\0\1\22\13\0\15\22\1\43"+
    "\10\22\4\0\1\22\13\0\5\22\1\47\20\22\4\0"+
    "\1\22\13\0\4\22\1\55\4\22\1\56\14\22\4\0"+
    "\1\22\13\0\13\22\1\57\12\22\4\0\2\60\44\0"+
    "\1\22\13\0\2\22\1\41\23\22\4\0\1\22\13\0"+
    "\13\22\1\41\12\22\4\0\1\22\13\0\6\22\1\50"+
    "\17\22\4\0\1\22\13\0\4\22\1\61\21\22\4\0"+
    "\1\22\13\0\20\22\1\62\5\22\4\0\1\22\13\0"+
    "\10\22\1\41\15\22\4\0\1\22\13\0\7\22\1\62"+
    "\16\22\4\0\1\22\13\0\14\22\1\41\11\22\4\0"+
    "\1\22\13\0\1\63\25\22\4\0\1\22\13\0\1\64"+
    "\25\22\4\0\1\22\13\0\15\22\1\47\10\22\4\0"+
    "\1\22\13\0\17\22\1\65\6\22\4\0\1\22\13\0"+
    "\11\22\1\66\14\22\4\0\1\22\13\0\11\22\1\67"+
    "\14\22\4\0\1\22\13\0\5\22\1\41\20\22\4\0"+
    "\1\22\13\0\4\22\1\41\21\22\4\0\1\22\13\0"+
    "\6\22\1\62\17\22\4\0\1\22\13\0\2\22\1\62"+
    "\23\22\4\0\1\22\13\0\1\61\25\22\4\0\1\22"+
    "\13\0\6\22\1\70\17\22\4\0\1\22\13\0\17\22"+
    "\1\71\3\22\1\72\2\22\4\0\1\22\13\0\4\22"+
    "\1\73\21\22\4\0\1\22\13\0\13\22\1\74\12\22"+
    "\4\0\1\22\13\0\4\22\1\75\21\22\4\0\1\22"+
    "\13\0\15\22\1\61\10\22\4\0\1\22\13\0\15\22"+
    "\1\76\10\22\4\0\1\22\13\0\10\22\1\77\15\22"+
    "\4\0\1\22\13\0\22\22\1\41\3\22\4\0\1\22"+
    "\13\0\20\22\1\100\5\22\4\0\1\22\13\0\13\22"+
    "\1\62\12\22";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1976];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\6\11\21\1\1\0\4\11\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
private ArrayList<Token> tokens;

private void adicionarToken(String classificacao, String lexema, int linha, int coluna) {
    this.tokens.add(new Token(classificacao, lexema, linha, coluna));
}

public LexicalAnalyzer(java.io.Reader in){
    this.tokens = new ArrayList();
    this.zzReader = in;
}

public ArrayList getTokens(){
    return this.tokens;
}

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2878) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 19: break;
          case 2: 
            { adicionarToken("NUM_INT", yytext(), yyline, yycolumn);
            }
          case 20: break;
          case 3: 
            { adicionarToken("OPSOMA", yytext(), yyline, yycolumn);
            }
          case 21: break;
          case 4: 
            { adicionarToken("OPSUB", yytext(), yyline, yycolumn);
            }
          case 22: break;
          case 5: 
            { adicionarToken("OPMUL", yytext(), yyline, yycolumn);
            }
          case 23: break;
          case 6: 
            { adicionarToken("OPDIV", yytext(), yyline, yycolumn);
            }
          case 24: break;
          case 7: 
            { adicionarToken("AP", yytext(), yyline, yycolumn);
            }
          case 25: break;
          case 8: 
            { adicionarToken("FP", yytext(), yyline, yycolumn);
            }
          case 26: break;
          case 9: 
            { adicionarToken("OP_MENOR", yytext(), yyline, yycolumn);
            }
          case 27: break;
          case 10: 
            { adicionarToken("OP_MAIOR", yytext(), yyline, yycolumn);
            }
          case 28: break;
          case 11: 
            { adicionarToken("OP_ATRI", yytext(), yyline, yycolumn);
            }
          case 29: break;
          case 12: 
            { adicionarToken("IDENTIFICADOR", yytext(), yyline, yycolumn);
            }
          case 30: break;
          case 13: 
            { adicionarToken("OP_MENOR_IGUAL", yytext(), yyline, yycolumn);
            }
          case 31: break;
          case 14: 
            { adicionarToken("OP_MAIOR_IGUAL", yytext(), yyline, yycolumn);
            }
          case 32: break;
          case 15: 
            { adicionarToken("OP_IGUAL", yytext(), yyline, yycolumn);
            }
          case 33: break;
          case 16: 
            { adicionarToken("OP_DIF", yytext(), yyline, yycolumn);
            }
          case 34: break;
          case 17: 
            { adicionarToken("PALAVRA_RESERVADA", yytext(), yyline, yycolumn);
            }
          case 35: break;
          case 18: 
            { adicionarToken("NUM_REAL", yytext(), yyline, yycolumn);
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
